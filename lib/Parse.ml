(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_bash"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "regex", None;
  "empty_value", None;
  "string_content", None;
  "pat_42e353e", None;
  "heredoc_body_end", None;
  "concat", None;
  "simple_heredoc_body", None;
  "semgrep_metavariable", None;
  "special_character", None;
  "heredoc_start", None;
  "heredoc_body_middle", None;
  "semgrep_metavar_eq", None;
  "test_operator", None;
  "raw_string", None;
  "file_descriptor", None;
  "variable_name", None;
  "semgrep_named_ellipsis", None;
  "tok_prec_p1_slash", None;
  "ansii_c_string", None;
  "heredoc_body_beginning", None;
  "word", None;
  "comment", None;
  "semgrep_metavar_pluseq", None;
  "orig_simple_variable_name",
  Some (
    Token (Name "pat_42e353e");
  );
  "heredoc_redirect",
  Some (
    Seq [
      Alt [|
        Token (Literal "<<");
        Token (Literal "<<-");
      |];
      Token (Name "heredoc_start");
    ];
  );
  "extended_word",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "word");
    |];
  );
  "simple_expansion",
  Some (
    Alt [|
      Seq [
        Token (Literal "$");
        Alt [|
          Token (Name "orig_simple_variable_name");
          Alt [|
            Token (Literal "*");
            Token (Literal "@");
            Token (Literal "?");
            Token (Literal "-");
            Token (Literal "$");
            Token (Literal "0");
            Token (Literal "_");
          |];
          Token (Literal "!");
          Token (Literal "#");
        |];
      ];
      Token (Name "semgrep_named_ellipsis");
    |];
  );
  "array",
  Some (
    Seq [
      Token (Literal "(");
      Repeat (
        Alt [|
          Token (Name "concatenation");
          Alt [|
            Token (Name "semgrep_deep_expression");
            Alt [|
              Token (Name "word");
              Token (Name "string");
              Token (Name "raw_string");
              Token (Name "ansii_c_string");
              Token (Name "expansion");
              Token (Name "simple_expansion");
              Token (Name "string_expansion");
              Token (Name "command_substitution");
              Token (Name "process_substitution");
            |];
          |];
          Repeat1 (
            Token (Name "special_character");
          );
        |];
      );
      Token (Literal ")");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "=");
          Token (Literal "==");
          Token (Literal "=~");
          Token (Literal "!=");
          Token (Literal "+");
          Token (Literal "-");
          Token (Literal "+=");
          Token (Literal "-=");
          Token (Literal "<");
          Token (Literal ">");
          Token (Literal "<=");
          Token (Literal ">=");
          Token (Literal "||");
          Token (Literal "&&");
          Token (Name "test_operator");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "==");
          Token (Literal "=~");
        |];
        Token (Name "regex");
      ];
    |];
  );
  "c_style_for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Token (Literal "((");
      Opt (
        Token (Name "expression");
      );
      Alt [|
        Token (Literal ";");
        Token (Literal ";;");
        Token (Literal "\n");
        Token (Literal "&");
      |];
      Opt (
        Token (Name "expression");
      );
      Alt [|
        Token (Literal ";");
        Token (Literal ";;");
        Token (Literal "\n");
        Token (Literal "&");
      |];
      Opt (
        Token (Name "expression");
      );
      Token (Literal "))");
      Opt (
        Token (Literal ";");
      );
      Alt [|
        Token (Name "do_group");
        Token (Name "compound_statement");
      |];
    ];
  );
  "case_item",
  Some (
    Seq [
      Alt [|
        Token (Name "concatenation");
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Repeat1 (
          Token (Name "special_character");
        );
      |];
      Repeat (
        Seq [
          Token (Literal "|");
          Alt [|
            Token (Name "concatenation");
            Alt [|
              Token (Name "semgrep_deep_expression");
              Alt [|
                Token (Name "word");
                Token (Name "string");
                Token (Name "raw_string");
                Token (Name "ansii_c_string");
                Token (Name "expansion");
                Token (Name "simple_expansion");
                Token (Name "string_expansion");
                Token (Name "command_substitution");
                Token (Name "process_substitution");
              |];
            |];
            Repeat1 (
              Token (Name "special_character");
            );
          |];
        ];
      );
      Token (Literal ")");
      Opt (
        Token (Name "statements");
      );
      Alt [|
        Token (Literal ";;");
        Alt [|
          Token (Literal ";&");
          Token (Literal ";;&");
        |];
      |];
    ];
  );
  "case_statement",
  Some (
    Seq [
      Token (Literal "case");
      Alt [|
        Token (Name "concatenation");
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Repeat1 (
          Token (Name "special_character");
        );
      |];
      Opt (
        Alt [|
          Token (Literal ";");
          Token (Literal ";;");
          Token (Literal "\n");
          Token (Literal "&");
        |];
      );
      Token (Literal "in");
      Alt [|
        Token (Literal ";");
        Token (Literal ";;");
        Token (Literal "\n");
        Token (Literal "&");
      |];
      Opt (
        Seq [
          Repeat (
            Token (Name "case_item");
          );
          Token (Name "last_case_item");
        ];
      );
      Token (Literal "esac");
    ];
  );
  "command",
  Some (
    Seq [
      Repeat (
        Alt [|
          Token (Name "variable_assignment");
          Token (Name "file_redirect");
        |];
      );
      Token (Name "command_name");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "concatenation");
            Alt [|
              Token (Name "semgrep_deep_expression");
              Alt [|
                Token (Name "word");
                Token (Name "string");
                Token (Name "raw_string");
                Token (Name "ansii_c_string");
                Token (Name "expansion");
                Token (Name "simple_expansion");
                Token (Name "string_expansion");
                Token (Name "command_substitution");
                Token (Name "process_substitution");
              |];
            |];
            Repeat1 (
              Token (Name "special_character");
            );
          |];
          Seq [
            Alt [|
              Token (Literal "=~");
              Token (Literal "==");
            |];
            Alt [|
              Alt [|
                Token (Name "concatenation");
                Alt [|
                  Token (Name "semgrep_deep_expression");
                  Alt [|
                    Token (Name "word");
                    Token (Name "string");
                    Token (Name "raw_string");
                    Token (Name "ansii_c_string");
                    Token (Name "expansion");
                    Token (Name "simple_expansion");
                    Token (Name "string_expansion");
                    Token (Name "command_substitution");
                    Token (Name "process_substitution");
                  |];
                |];
                Repeat1 (
                  Token (Name "special_character");
                );
              |];
              Token (Name "regex");
            |];
          ];
        |];
      );
    ];
  );
  "command_name",
  Some (
    Alt [|
      Token (Name "concatenation");
      Alt [|
        Token (Name "semgrep_deep_expression");
        Alt [|
          Token (Name "word");
          Token (Name "string");
          Token (Name "raw_string");
          Token (Name "ansii_c_string");
          Token (Name "expansion");
          Token (Name "simple_expansion");
          Token (Name "string_expansion");
          Token (Name "command_substitution");
          Token (Name "process_substitution");
        |];
      |];
      Repeat1 (
        Token (Name "special_character");
      );
    |];
  );
  "command_substitution",
  Some (
    Alt [|
      Seq [
        Token (Literal "$(");
        Token (Name "statements");
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "$(");
        Token (Name "file_redirect");
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "`");
        Token (Name "statements");
        Token (Literal "`");
      ];
    |];
  );
  "compound_statement",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Repeat1 (
          Seq [
            Alt [|
              Token (Name "redirected_statement");
              Token (Name "variable_assignment");
              Token (Name "command");
              Token (Name "declaration_command");
              Token (Name "unset_command");
              Token (Name "test_command");
              Token (Name "negated_command");
              Token (Name "for_statement");
              Token (Name "c_style_for_statement");
              Token (Name "while_statement");
              Token (Name "if_statement");
              Token (Name "case_statement");
              Token (Name "pipeline");
              Token (Name "list");
              Token (Name "subshell");
              Token (Name "compound_statement");
              Token (Name "function_definition");
            |];
            Opt (
              Seq [
                Token (Literal "\n");
                Token (Name "heredoc_body");
              ];
            );
            Alt [|
              Token (Literal ";");
              Token (Literal ";;");
              Token (Literal "\n");
              Token (Literal "&");
            |];
          ];
        );
      );
      Token (Literal "}");
    ];
  );
  "concatenation",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Token (Name "special_character");
      |];
      Repeat1 (
        Seq [
          Token (Name "concat");
          Alt [|
            Alt [|
              Token (Name "semgrep_deep_expression");
              Alt [|
                Token (Name "word");
                Token (Name "string");
                Token (Name "raw_string");
                Token (Name "ansii_c_string");
                Token (Name "expansion");
                Token (Name "simple_expansion");
                Token (Name "string_expansion");
                Token (Name "command_substitution");
                Token (Name "process_substitution");
              |];
            |];
            Token (Name "special_character");
          |];
        ];
      );
      Opt (
        Seq [
          Token (Name "concat");
          Token (Literal "$");
        ];
      );
    ];
  );
  "declaration_command",
  Some (
    Seq [
      Alt [|
        Token (Literal "declare");
        Token (Literal "typeset");
        Token (Literal "export");
        Token (Literal "readonly");
        Token (Literal "local");
      |];
      Repeat (
        Alt [|
          Alt [|
            Token (Name "concatenation");
            Alt [|
              Token (Name "semgrep_deep_expression");
              Alt [|
                Token (Name "word");
                Token (Name "string");
                Token (Name "raw_string");
                Token (Name "ansii_c_string");
                Token (Name "expansion");
                Token (Name "simple_expansion");
                Token (Name "string_expansion");
                Token (Name "command_substitution");
                Token (Name "process_substitution");
              |];
            |];
            Repeat1 (
              Token (Name "special_character");
            );
          |];
          Alt [|
            Token (Name "semgrep_metavariable");
            Token (Name "pat_42e353e");
          |];
          Token (Name "variable_assignment");
        |];
      );
    ];
  );
  "do_group",
  Some (
    Seq [
      Token (Literal "do");
      Opt (
        Repeat1 (
          Seq [
            Alt [|
              Token (Name "redirected_statement");
              Token (Name "variable_assignment");
              Token (Name "command");
              Token (Name "declaration_command");
              Token (Name "unset_command");
              Token (Name "test_command");
              Token (Name "negated_command");
              Token (Name "for_statement");
              Token (Name "c_style_for_statement");
              Token (Name "while_statement");
              Token (Name "if_statement");
              Token (Name "case_statement");
              Token (Name "pipeline");
              Token (Name "list");
              Token (Name "subshell");
              Token (Name "compound_statement");
              Token (Name "function_definition");
            |];
            Opt (
              Seq [
                Token (Literal "\n");
                Token (Name "heredoc_body");
              ];
            );
            Alt [|
              Token (Literal ";");
              Token (Literal ";;");
              Token (Literal "\n");
              Token (Literal "&");
            |];
          ];
        );
      );
      Token (Literal "done");
    ];
  );
  "elif_clause",
  Some (
    Seq [
      Token (Literal "elif");
      Token (Name "terminated_statement");
      Token (Literal "then");
      Opt (
        Repeat1 (
          Seq [
            Alt [|
              Token (Name "redirected_statement");
              Token (Name "variable_assignment");
              Token (Name "command");
              Token (Name "declaration_command");
              Token (Name "unset_command");
              Token (Name "test_command");
              Token (Name "negated_command");
              Token (Name "for_statement");
              Token (Name "c_style_for_statement");
              Token (Name "while_statement");
              Token (Name "if_statement");
              Token (Name "case_statement");
              Token (Name "pipeline");
              Token (Name "list");
              Token (Name "subshell");
              Token (Name "compound_statement");
              Token (Name "function_definition");
            |];
            Opt (
              Seq [
                Token (Literal "\n");
                Token (Name "heredoc_body");
              ];
            );
            Alt [|
              Token (Literal ";");
              Token (Literal ";;");
              Token (Literal "\n");
              Token (Literal "&");
            |];
          ];
        );
      );
    ];
  );
  "else_clause",
  Some (
    Seq [
      Token (Literal "else");
      Opt (
        Repeat1 (
          Seq [
            Alt [|
              Token (Name "redirected_statement");
              Token (Name "variable_assignment");
              Token (Name "command");
              Token (Name "declaration_command");
              Token (Name "unset_command");
              Token (Name "test_command");
              Token (Name "negated_command");
              Token (Name "for_statement");
              Token (Name "c_style_for_statement");
              Token (Name "while_statement");
              Token (Name "if_statement");
              Token (Name "case_statement");
              Token (Name "pipeline");
              Token (Name "list");
              Token (Name "subshell");
              Token (Name "compound_statement");
              Token (Name "function_definition");
            |];
            Opt (
              Seq [
                Token (Literal "\n");
                Token (Name "heredoc_body");
              ];
            );
            Alt [|
              Token (Literal ";");
              Token (Literal ";;");
              Token (Literal "\n");
              Token (Literal "&");
            |];
          ];
        );
      );
    ];
  );
  "expansion",
  Some (
    Seq [
      Token (Literal "${");
      Opt (
        Alt [|
          Token (Literal "#");
          Token (Literal "!");
        |];
      );
      Opt (
        Alt [|
          Seq [
            Token (Name "variable_name");
            Token (Literal "=");
            Opt (
              Alt [|
                Token (Name "concatenation");
                Alt [|
                  Token (Name "semgrep_deep_expression");
                  Alt [|
                    Token (Name "word");
                    Token (Name "string");
                    Token (Name "raw_string");
                    Token (Name "ansii_c_string");
                    Token (Name "expansion");
                    Token (Name "simple_expansion");
                    Token (Name "string_expansion");
                    Token (Name "command_substitution");
                    Token (Name "process_substitution");
                  |];
                |];
                Repeat1 (
                  Token (Name "special_character");
                );
              |];
            );
          ];
          Seq [
            Alt [|
              Token (Name "subscript");
              Alt [|
                Token (Name "semgrep_metavariable");
                Token (Name "pat_42e353e");
              |];
              Alt [|
                Token (Literal "*");
                Token (Literal "@");
                Token (Literal "?");
                Token (Literal "-");
                Token (Literal "$");
                Token (Literal "0");
                Token (Literal "_");
              |];
            |];
            Opt (
              Seq [
                Token (Name "tok_prec_p1_slash");
                Opt (
                  Token (Name "regex");
                );
              ];
            );
            Repeat (
              Alt [|
                Alt [|
                  Token (Name "concatenation");
                  Alt [|
                    Token (Name "semgrep_deep_expression");
                    Alt [|
                      Token (Name "word");
                      Token (Name "string");
                      Token (Name "raw_string");
                      Token (Name "ansii_c_string");
                      Token (Name "expansion");
                      Token (Name "simple_expansion");
                      Token (Name "string_expansion");
                      Token (Name "command_substitution");
                      Token (Name "process_substitution");
                    |];
                  |];
                  Repeat1 (
                    Token (Name "special_character");
                  );
                |];
                Token (Literal ":");
                Token (Literal ":?");
                Token (Literal "=");
                Token (Literal ":-");
                Token (Literal "%");
                Token (Literal "-");
                Token (Literal "#");
              |];
            );
          ];
        |];
      );
      Token (Literal "}");
    ];
  );
  "expression",
  Some (
    Alt [|
      Alt [|
        Token (Name "concatenation");
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Repeat1 (
          Token (Name "special_character");
        );
      |];
      Token (Name "unary_expression");
      Token (Name "ternary_expression");
      Token (Name "binary_expression");
      Token (Name "postfix_expression");
      Token (Name "parenthesized_expression");
    |];
  );
  "file_redirect",
  Some (
    Seq [
      Opt (
        Token (Name "file_descriptor");
      );
      Alt [|
        Token (Literal "<");
        Token (Literal ">");
        Token (Literal ">>");
        Token (Literal "&>");
        Token (Literal "&>>");
        Token (Literal "<&");
        Token (Literal ">&");
        Token (Literal ">|");
      |];
      Alt [|
        Token (Name "concatenation");
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Repeat1 (
          Token (Name "special_character");
        );
      |];
    ];
  );
  "for_statement",
  Some (
    Seq [
      Alt [|
        Token (Literal "for");
        Token (Literal "select");
      |];
      Alt [|
        Token (Name "semgrep_metavariable");
        Token (Name "pat_42e353e");
      |];
      Opt (
        Seq [
          Token (Literal "in");
          Repeat1 (
            Alt [|
              Token (Name "concatenation");
              Alt [|
                Token (Name "semgrep_deep_expression");
                Alt [|
                  Token (Name "word");
                  Token (Name "string");
                  Token (Name "raw_string");
                  Token (Name "ansii_c_string");
                  Token (Name "expansion");
                  Token (Name "simple_expansion");
                  Token (Name "string_expansion");
                  Token (Name "command_substitution");
                  Token (Name "process_substitution");
                |];
              |];
              Repeat1 (
                Token (Name "special_character");
              );
            |];
          );
        ];
      );
      Alt [|
        Token (Literal ";");
        Token (Literal ";;");
        Token (Literal "\n");
        Token (Literal "&");
      |];
      Token (Name "do_group");
    ];
  );
  "function_definition",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "function");
          Token (Name "extended_word");
          Opt (
            Seq [
              Token (Literal "(");
              Token (Literal ")");
            ];
          );
        ];
        Seq [
          Token (Name "word");
          Token (Literal "(");
          Token (Literal ")");
        ];
      |];
      Alt [|
        Token (Name "compound_statement");
        Token (Name "subshell");
        Token (Name "test_command");
      |];
    ];
  );
  "heredoc_body",
  Some (
    Alt [|
      Token (Name "simple_heredoc_body");
      Seq [
        Token (Name "heredoc_body_beginning");
        Repeat (
          Alt [|
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "command_substitution");
            Token (Name "heredoc_body_middle");
          |];
        );
        Token (Name "heredoc_body_end");
      ];
    |];
  );
  "herestring_redirect",
  Some (
    Seq [
      Token (Literal "<<<");
      Alt [|
        Token (Name "concatenation");
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Repeat1 (
          Token (Name "special_character");
        );
      |];
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "terminated_statement");
      Token (Literal "then");
      Opt (
        Repeat1 (
          Seq [
            Alt [|
              Token (Name "redirected_statement");
              Token (Name "variable_assignment");
              Token (Name "command");
              Token (Name "declaration_command");
              Token (Name "unset_command");
              Token (Name "test_command");
              Token (Name "negated_command");
              Token (Name "for_statement");
              Token (Name "c_style_for_statement");
              Token (Name "while_statement");
              Token (Name "if_statement");
              Token (Name "case_statement");
              Token (Name "pipeline");
              Token (Name "list");
              Token (Name "subshell");
              Token (Name "compound_statement");
              Token (Name "function_definition");
            |];
            Opt (
              Seq [
                Token (Literal "\n");
                Token (Name "heredoc_body");
              ];
            );
            Alt [|
              Token (Literal ";");
              Token (Literal ";;");
              Token (Literal "\n");
              Token (Literal "&");
            |];
          ];
        );
      );
      Repeat (
        Token (Name "elif_clause");
      );
      Opt (
        Token (Name "else_clause");
      );
      Token (Literal "fi");
    ];
  );
  "last_case_item",
  Some (
    Seq [
      Alt [|
        Token (Name "concatenation");
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Repeat1 (
          Token (Name "special_character");
        );
      |];
      Repeat (
        Seq [
          Token (Literal "|");
          Alt [|
            Token (Name "concatenation");
            Alt [|
              Token (Name "semgrep_deep_expression");
              Alt [|
                Token (Name "word");
                Token (Name "string");
                Token (Name "raw_string");
                Token (Name "ansii_c_string");
                Token (Name "expansion");
                Token (Name "simple_expansion");
                Token (Name "string_expansion");
                Token (Name "command_substitution");
                Token (Name "process_substitution");
              |];
            |];
            Repeat1 (
              Token (Name "special_character");
            );
          |];
        ];
      );
      Token (Literal ")");
      Opt (
        Token (Name "statements");
      );
      Opt (
        Token (Literal ";;");
      );
    ];
  );
  "list",
  Some (
    Seq [
      Alt [|
        Token (Name "redirected_statement");
        Token (Name "variable_assignment");
        Token (Name "command");
        Token (Name "declaration_command");
        Token (Name "unset_command");
        Token (Name "test_command");
        Token (Name "negated_command");
        Token (Name "for_statement");
        Token (Name "c_style_for_statement");
        Token (Name "while_statement");
        Token (Name "if_statement");
        Token (Name "case_statement");
        Token (Name "pipeline");
        Token (Name "list");
        Token (Name "subshell");
        Token (Name "compound_statement");
        Token (Name "function_definition");
      |];
      Alt [|
        Token (Literal "&&");
        Token (Literal "||");
      |];
      Alt [|
        Token (Name "redirected_statement");
        Token (Name "variable_assignment");
        Token (Name "command");
        Token (Name "declaration_command");
        Token (Name "unset_command");
        Token (Name "test_command");
        Token (Name "negated_command");
        Token (Name "for_statement");
        Token (Name "c_style_for_statement");
        Token (Name "while_statement");
        Token (Name "if_statement");
        Token (Name "case_statement");
        Token (Name "pipeline");
        Token (Name "list");
        Token (Name "subshell");
        Token (Name "compound_statement");
        Token (Name "function_definition");
      |];
    ];
  );
  "negated_command",
  Some (
    Seq [
      Token (Literal "!");
      Alt [|
        Token (Name "command");
        Token (Name "test_command");
        Token (Name "subshell");
      |];
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "pipeline",
  Some (
    Seq [
      Alt [|
        Token (Name "redirected_statement");
        Token (Name "variable_assignment");
        Token (Name "command");
        Token (Name "declaration_command");
        Token (Name "unset_command");
        Token (Name "test_command");
        Token (Name "negated_command");
        Token (Name "for_statement");
        Token (Name "c_style_for_statement");
        Token (Name "while_statement");
        Token (Name "if_statement");
        Token (Name "case_statement");
        Token (Name "pipeline");
        Token (Name "list");
        Token (Name "subshell");
        Token (Name "compound_statement");
        Token (Name "function_definition");
      |];
      Alt [|
        Token (Literal "|");
        Token (Literal "|&");
      |];
      Alt [|
        Token (Name "redirected_statement");
        Token (Name "variable_assignment");
        Token (Name "command");
        Token (Name "declaration_command");
        Token (Name "unset_command");
        Token (Name "test_command");
        Token (Name "negated_command");
        Token (Name "for_statement");
        Token (Name "c_style_for_statement");
        Token (Name "while_statement");
        Token (Name "if_statement");
        Token (Name "case_statement");
        Token (Name "pipeline");
        Token (Name "list");
        Token (Name "subshell");
        Token (Name "compound_statement");
        Token (Name "function_definition");
      |];
    ];
  );
  "postfix_expression",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Literal "++");
        Token (Literal "--");
      |];
    ];
  );
  "process_substitution",
  Some (
    Seq [
      Alt [|
        Token (Literal "<(");
        Token (Literal ">(");
      |];
      Token (Name "statements");
      Token (Literal ")");
    ];
  );
  "redirected_statement",
  Some (
    Seq [
      Alt [|
        Token (Name "redirected_statement");
        Token (Name "variable_assignment");
        Token (Name "command");
        Token (Name "declaration_command");
        Token (Name "unset_command");
        Token (Name "test_command");
        Token (Name "negated_command");
        Token (Name "for_statement");
        Token (Name "c_style_for_statement");
        Token (Name "while_statement");
        Token (Name "if_statement");
        Token (Name "case_statement");
        Token (Name "pipeline");
        Token (Name "list");
        Token (Name "subshell");
        Token (Name "compound_statement");
        Token (Name "function_definition");
      |];
      Repeat1 (
        Alt [|
          Token (Name "file_redirect");
          Token (Name "heredoc_redirect");
          Token (Name "herestring_redirect");
        |];
      );
    ];
  );
  "semgrep_deep_expression",
  Some (
    Seq [
      Token (Literal "<...");
      Alt [|
        Token (Name "concatenation");
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Repeat1 (
          Token (Name "special_character");
        );
      |];
      Token (Literal "...>");
    ];
  );
  "statements",
  Some (
    Seq [
      Repeat (
        Seq [
          Alt [|
            Token (Name "redirected_statement");
            Token (Name "variable_assignment");
            Token (Name "command");
            Token (Name "declaration_command");
            Token (Name "unset_command");
            Token (Name "test_command");
            Token (Name "negated_command");
            Token (Name "for_statement");
            Token (Name "c_style_for_statement");
            Token (Name "while_statement");
            Token (Name "if_statement");
            Token (Name "case_statement");
            Token (Name "pipeline");
            Token (Name "list");
            Token (Name "subshell");
            Token (Name "compound_statement");
            Token (Name "function_definition");
          |];
          Opt (
            Seq [
              Token (Literal "\n");
              Token (Name "heredoc_body");
            ];
          );
          Alt [|
            Token (Literal ";");
            Token (Literal ";;");
            Token (Literal "\n");
            Token (Literal "&");
          |];
        ];
      );
      Alt [|
        Token (Name "redirected_statement");
        Token (Name "variable_assignment");
        Token (Name "command");
        Token (Name "declaration_command");
        Token (Name "unset_command");
        Token (Name "test_command");
        Token (Name "negated_command");
        Token (Name "for_statement");
        Token (Name "c_style_for_statement");
        Token (Name "while_statement");
        Token (Name "if_statement");
        Token (Name "case_statement");
        Token (Name "pipeline");
        Token (Name "list");
        Token (Name "subshell");
        Token (Name "compound_statement");
        Token (Name "function_definition");
      |];
      Opt (
        Seq [
          Token (Literal "\n");
          Token (Name "heredoc_body");
        ];
      );
      Opt (
        Alt [|
          Token (Literal ";");
          Token (Literal ";;");
          Token (Literal "\n");
          Token (Literal "&");
        |];
      );
    ];
  );
  "string",
  Some (
    Seq [
      Token (Literal "\"");
      Repeat (
        Seq [
          Alt [|
            Seq [
              Opt (
                Token (Literal "$");
              );
              Token (Name "string_content");
            ];
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "command_substitution");
          |];
          Opt (
            Token (Name "concat");
          );
        ];
      );
      Opt (
        Token (Literal "$");
      );
      Token (Literal "\"");
    ];
  );
  "string_expansion",
  Some (
    Seq [
      Token (Literal "$");
      Alt [|
        Token (Name "string");
        Token (Name "raw_string");
      |];
    ];
  );
  "subscript",
  Some (
    Seq [
      Token (Name "variable_name");
      Token (Literal "[");
      Alt [|
        Token (Name "concatenation");
        Alt [|
          Token (Name "semgrep_deep_expression");
          Alt [|
            Token (Name "word");
            Token (Name "string");
            Token (Name "raw_string");
            Token (Name "ansii_c_string");
            Token (Name "expansion");
            Token (Name "simple_expansion");
            Token (Name "string_expansion");
            Token (Name "command_substitution");
            Token (Name "process_substitution");
          |];
        |];
        Repeat1 (
          Token (Name "special_character");
        );
      |];
      Opt (
        Token (Name "concat");
      );
      Token (Literal "]");
      Opt (
        Token (Name "concat");
      );
    ];
  );
  "subshell",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "statements");
      Token (Literal ")");
    ];
  );
  "terminated_statement",
  Some (
    Seq [
      Alt [|
        Token (Name "redirected_statement");
        Token (Name "variable_assignment");
        Token (Name "command");
        Token (Name "declaration_command");
        Token (Name "unset_command");
        Token (Name "test_command");
        Token (Name "negated_command");
        Token (Name "for_statement");
        Token (Name "c_style_for_statement");
        Token (Name "while_statement");
        Token (Name "if_statement");
        Token (Name "case_statement");
        Token (Name "pipeline");
        Token (Name "list");
        Token (Name "subshell");
        Token (Name "compound_statement");
        Token (Name "function_definition");
      |];
      Alt [|
        Token (Literal ";");
        Token (Literal ";;");
        Token (Literal "\n");
        Token (Literal "&");
      |];
    ];
  );
  "ternary_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "?");
      Token (Name "expression");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "test_command",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "[");
          Token (Name "expression");
          Token (Literal "]");
        ];
        Seq [
          Token (Literal "[[");
          Token (Name "expression");
          Token (Literal "]]");
        ];
        Seq [
          Token (Literal "((");
          Token (Name "expression");
          Token (Literal "))");
        ];
      |];
    ];
  );
  "unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "!");
        Token (Name "test_operator");
      |];
      Token (Name "expression");
    ];
  );
  "unset_command",
  Some (
    Seq [
      Alt [|
        Token (Literal "unset");
        Token (Literal "unsetenv");
      |];
      Repeat (
        Alt [|
          Alt [|
            Token (Name "concatenation");
            Alt [|
              Token (Name "semgrep_deep_expression");
              Alt [|
                Token (Name "word");
                Token (Name "string");
                Token (Name "raw_string");
                Token (Name "ansii_c_string");
                Token (Name "expansion");
                Token (Name "simple_expansion");
                Token (Name "string_expansion");
                Token (Name "command_substitution");
                Token (Name "process_substitution");
              |];
            |];
            Repeat1 (
              Token (Name "special_character");
            );
          |];
          Alt [|
            Token (Name "semgrep_metavariable");
            Token (Name "pat_42e353e");
          |];
        |];
      );
    ];
  );
  "variable_assignment",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "semgrep_metavar_eq");
          Token (Name "semgrep_metavar_pluseq");
        |];
        Alt [|
          Alt [|
            Token (Name "concatenation");
            Alt [|
              Token (Name "semgrep_deep_expression");
              Alt [|
                Token (Name "word");
                Token (Name "string");
                Token (Name "raw_string");
                Token (Name "ansii_c_string");
                Token (Name "expansion");
                Token (Name "simple_expansion");
                Token (Name "string_expansion");
                Token (Name "command_substitution");
                Token (Name "process_substitution");
              |];
            |];
            Repeat1 (
              Token (Name "special_character");
            );
          |];
          Token (Name "array");
          Token (Name "empty_value");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "variable_name");
          Token (Name "subscript");
        |];
        Alt [|
          Token (Literal "=");
          Token (Literal "+=");
        |];
        Alt [|
          Alt [|
            Token (Name "concatenation");
            Alt [|
              Token (Name "semgrep_deep_expression");
              Alt [|
                Token (Name "word");
                Token (Name "string");
                Token (Name "raw_string");
                Token (Name "ansii_c_string");
                Token (Name "expansion");
                Token (Name "simple_expansion");
                Token (Name "string_expansion");
                Token (Name "command_substitution");
                Token (Name "process_substitution");
              |];
            |];
            Repeat1 (
              Token (Name "special_character");
            );
          |];
          Token (Name "array");
          Token (Name "empty_value");
        |];
      ];
    |];
  );
  "while_statement",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "terminated_statement");
      Token (Name "do_group");
    ];
  );
  "program",
  Some (
    Opt (
      Token (Name "statements");
    );
  );
]

let trans_regex ((kind, body) : mt) : CST.regex =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_empty_value ((kind, body) : mt) : CST.empty_value =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_content ((kind, body) : mt) : CST.string_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_42e353e ((kind, body) : mt) : CST.pat_42e353e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_heredoc_body_end ((kind, body) : mt) : CST.heredoc_body_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_concat ((kind, body) : mt) : CST.concat =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_simple_heredoc_body ((kind, body) : mt) : CST.simple_heredoc_body =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavariable ((kind, body) : mt) : CST.semgrep_metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_special_character ((kind, body) : mt) : CST.special_character =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_start ((kind, body) : mt) : CST.heredoc_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_body_middle ((kind, body) : mt) : CST.heredoc_body_middle =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavar_eq ((kind, body) : mt) : CST.semgrep_metavar_eq =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_test_operator ((kind, body) : mt) : CST.test_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_raw_string ((kind, body) : mt) : CST.raw_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_file_descriptor ((kind, body) : mt) : CST.file_descriptor =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_variable_name ((kind, body) : mt) : CST.variable_name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_named_ellipsis ((kind, body) : mt) : CST.semgrep_named_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_slash ((kind, body) : mt) : CST.tok_prec_p1_slash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ansii_c_string ((kind, body) : mt) : CST.ansii_c_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_body_beginning ((kind, body) : mt) : CST.heredoc_body_beginning =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_word ((kind, body) : mt) : CST.word =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavar_pluseq ((kind, body) : mt) : CST.semgrep_metavar_pluseq =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_orig_simple_variable_name ((kind, body) : mt) : CST.orig_simple_variable_name =
  match body with
  | Children v ->
      trans_pat_42e353e (Run.matcher_token v)
  | Leaf _ -> assert false


let trans_heredoc_redirect ((kind, body) : mt) : CST.heredoc_redirect =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LTLT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LTLTDASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_heredoc_start (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_extended_word ((kind, body) : mt) : CST.extended_word =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Word (
            trans_word (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_simple_expansion ((kind, body) : mt) : CST.simple_expansion =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DOLLAR_choice_orig_simple_var_name (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Orig_simple_var_name (
                        trans_orig_simple_variable_name (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_STAR (
                        (match v with
                        | Alt (0, v) ->
                            `STAR (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `AT (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `QMARK (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `DASH (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `DOLLAR (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `X_0 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `X__ (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `BANG (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `HASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_named_ellips (
            trans_semgrep_named_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_array_ ((kind, body) : mt) : CST.array_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Conc (
                      trans_concatenation (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Choice_semg_deep_exp (
                      (match v with
                      | Alt (0, v) ->
                          `Semg_deep_exp (
                            trans_semgrep_deep_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_word (
                            (match v with
                            | Alt (0, v) ->
                                `Word (
                                  trans_word (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Str (
                                  trans_string_ (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Raw_str (
                                  trans_raw_string (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Ansii_c_str (
                                  trans_ansii_c_string (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Expa (
                                  trans_expansion (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Simple_expa (
                                  trans_simple_expansion (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `Str_expa (
                                  trans_string_expansion (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `Cmd_subs (
                                  trans_command_substitution (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Proc_subs (
                                  trans_process_substitution (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (2, v) ->
                    `Rep1_spec_char (
                      Run.repeat1
                        (fun v -> trans_special_character (Run.matcher_token v))
                        v
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_choice_EQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `EQTILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `PLUSEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `DASHEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `BARBAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `AMPAMP (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Test_op (
                        trans_test_operator (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_choice_EQEQ_regex (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `EQTILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_regex (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_c_style_for_statement ((kind, body) : mt) : CST.c_style_for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMISEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `LF (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v4
            ,
            (match v5 with
            | Alt (0, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMISEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `LF (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v6
            ,
            Run.trans_token (Run.matcher_token v7),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v8
            ,
            (match v9 with
            | Alt (0, v) ->
                `Do_group (
                  trans_do_group (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_item ((kind, body) : mt) : CST.case_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Rep1_spec_char (
                  Run.repeat1
                    (fun v -> trans_special_character (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_semg_deep_exp (
                            (match v with
                            | Alt (0, v) ->
                                `Semg_deep_exp (
                                  trans_semgrep_deep_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_word (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Word (
                                        trans_word (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Str (
                                        trans_string_ (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Raw_str (
                                        trans_raw_string (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Ansii_c_str (
                                        trans_ansii_c_string (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Expa (
                                        trans_expansion (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Simple_expa (
                                        trans_simple_expansion (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Str_expa (
                                        trans_string_expansion (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `Cmd_subs (
                                        trans_command_substitution (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `Proc_subs (
                                        trans_process_substitution (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Rep1_spec_char (
                            Run.repeat1
                              (fun v -> trans_special_character (Run.matcher_token v))
                              v
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v3
            ,
            (match v4 with
            | Alt (0, v) ->
                `SEMISEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_SEMIAMP (
                  (match v with
                  | Alt (0, v) ->
                      `SEMIAMP (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMISEMIAMP (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_statement ((kind, body) : mt) : CST.case_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Rep1_spec_char (
                  Run.repeat1
                    (fun v -> trans_special_character (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `SEMISEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `LF (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `AMP (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMISEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `LF (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.repeat
                        (fun v -> trans_case_item (Run.matcher_token v))
                        v0
                      ,
                      trans_last_case_item (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_command ((kind, body) : mt) : CST.command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Var_assign (
                      trans_variable_assignment (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `File_redi (
                      trans_file_redirect (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_command_name (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_conc (
                      (match v with
                      | Alt (0, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_semg_deep_exp (
                            (match v with
                            | Alt (0, v) ->
                                `Semg_deep_exp (
                                  trans_semgrep_deep_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_word (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Word (
                                        trans_word (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Str (
                                        trans_string_ (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Raw_str (
                                        trans_raw_string (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Ansii_c_str (
                                        trans_ansii_c_string (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Expa (
                                        trans_expansion (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Simple_expa (
                                        trans_simple_expansion (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Str_expa (
                                        trans_string_expansion (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `Cmd_subs (
                                        trans_command_substitution (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `Proc_subs (
                                        trans_process_substitution (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Rep1_spec_char (
                            Run.repeat1
                              (fun v -> trans_special_character (Run.matcher_token v))
                              v
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_EQTILDE_choice_choice_conc (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `EQTILDE (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `EQEQ (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            (match v1 with
                            | Alt (0, v) ->
                                `Choice_conc (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Conc (
                                        trans_concatenation (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Choice_semg_deep_exp (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Semg_deep_exp (
                                              trans_semgrep_deep_expression (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Choice_word (
                                              (match v with
                                              | Alt (0, v) ->
                                                  `Word (
                                                    trans_word (Run.matcher_token v)
                                                  )
                                              | Alt (1, v) ->
                                                  `Str (
                                                    trans_string_ (Run.matcher_token v)
                                                  )
                                              | Alt (2, v) ->
                                                  `Raw_str (
                                                    trans_raw_string (Run.matcher_token v)
                                                  )
                                              | Alt (3, v) ->
                                                  `Ansii_c_str (
                                                    trans_ansii_c_string (Run.matcher_token v)
                                                  )
                                              | Alt (4, v) ->
                                                  `Expa (
                                                    trans_expansion (Run.matcher_token v)
                                                  )
                                              | Alt (5, v) ->
                                                  `Simple_expa (
                                                    trans_simple_expansion (Run.matcher_token v)
                                                  )
                                              | Alt (6, v) ->
                                                  `Str_expa (
                                                    trans_string_expansion (Run.matcher_token v)
                                                  )
                                              | Alt (7, v) ->
                                                  `Cmd_subs (
                                                    trans_command_substitution (Run.matcher_token v)
                                                  )
                                              | Alt (8, v) ->
                                                  `Proc_subs (
                                                    trans_process_substitution (Run.matcher_token v)
                                                  )
                                              | _ -> assert false
                                              )
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (2, v) ->
                                      `Rep1_spec_char (
                                        Run.repeat1
                                          (fun v -> trans_special_character (Run.matcher_token v))
                                          v
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Regex (
                                  trans_regex (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_command_name ((kind, body) : mt) : CST.command_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Conc (
            trans_concatenation (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_semg_deep_exp (
            (match v with
            | Alt (0, v) ->
                `Semg_deep_exp (
                  trans_semgrep_deep_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_word (
                  (match v with
                  | Alt (0, v) ->
                      `Word (
                        trans_word (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Raw_str (
                        trans_raw_string (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Ansii_c_str (
                        trans_ansii_c_string (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Expa (
                        trans_expansion (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Simple_expa (
                        trans_simple_expansion (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Str_expa (
                        trans_string_expansion (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Cmd_subs (
                        trans_command_substitution (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Proc_subs (
                        trans_process_substitution (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Rep1_spec_char (
            Run.repeat1
              (fun v -> trans_special_character (Run.matcher_token v))
              v
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_command_substitution ((kind, body) : mt) : CST.command_substitution =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DOLLARLPAR_stmts_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_statements (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `DOLLARLPAR_file_redi_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_file_redirect (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `BQUOT_stmts_BQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_statements (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_statement ((kind, body) : mt) : CST.compound_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Seq [v0; v1; v2] ->
                        (
                          (match v0 with
                          | Alt (0, v) ->
                              `Redi_stmt (
                                trans_redirected_statement (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Var_assign (
                                trans_variable_assignment (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Cmd (
                                trans_command (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Decl_cmd (
                                trans_declaration_command (Run.matcher_token v)
                              )
                          | Alt (4, v) ->
                              `Unset_cmd (
                                trans_unset_command (Run.matcher_token v)
                              )
                          | Alt (5, v) ->
                              `Test_cmd (
                                trans_test_command (Run.matcher_token v)
                              )
                          | Alt (6, v) ->
                              `Nega_cmd (
                                trans_negated_command (Run.matcher_token v)
                              )
                          | Alt (7, v) ->
                              `For_stmt (
                                trans_for_statement (Run.matcher_token v)
                              )
                          | Alt (8, v) ->
                              `C_style_for_stmt (
                                trans_c_style_for_statement (Run.matcher_token v)
                              )
                          | Alt (9, v) ->
                              `While_stmt (
                                trans_while_statement (Run.matcher_token v)
                              )
                          | Alt (10, v) ->
                              `If_stmt (
                                trans_if_statement (Run.matcher_token v)
                              )
                          | Alt (11, v) ->
                              `Case_stmt (
                                trans_case_statement (Run.matcher_token v)
                              )
                          | Alt (12, v) ->
                              `Pipe (
                                trans_pipeline (Run.matcher_token v)
                              )
                          | Alt (13, v) ->
                              `List (
                                trans_list_ (Run.matcher_token v)
                              )
                          | Alt (14, v) ->
                              `Subs (
                                trans_subshell (Run.matcher_token v)
                              )
                          | Alt (15, v) ->
                              `Comp_stmt (
                                trans_compound_statement (Run.matcher_token v)
                              )
                          | Alt (16, v) ->
                              `Func_defi (
                                trans_function_definition (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                          ,
                          Run.opt
                            (fun v ->
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    trans_heredoc_body (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                            v1
                          ,
                          (match v2 with
                          | Alt (0, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMISEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `LF (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `AMP (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_concatenation ((kind, body) : mt) : CST.concatenation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Spec_char (
                  trans_special_character (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_concat (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Choice_semg_deep_exp (
                            (match v with
                            | Alt (0, v) ->
                                `Semg_deep_exp (
                                  trans_semgrep_deep_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_word (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Word (
                                        trans_word (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Str (
                                        trans_string_ (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Raw_str (
                                        trans_raw_string (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Ansii_c_str (
                                        trans_ansii_c_string (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Expa (
                                        trans_expansion (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Simple_expa (
                                        trans_simple_expansion (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Str_expa (
                                        trans_string_expansion (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `Cmd_subs (
                                        trans_command_substitution (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `Proc_subs (
                                        trans_process_substitution (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Spec_char (
                            trans_special_character (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_concat (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_command ((kind, body) : mt) : CST.declaration_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Decl (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Export (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Read (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Local (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_conc (
                      (match v with
                      | Alt (0, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_semg_deep_exp (
                            (match v with
                            | Alt (0, v) ->
                                `Semg_deep_exp (
                                  trans_semgrep_deep_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_word (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Word (
                                        trans_word (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Str (
                                        trans_string_ (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Raw_str (
                                        trans_raw_string (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Ansii_c_str (
                                        trans_ansii_c_string (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Expa (
                                        trans_expansion (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Simple_expa (
                                        trans_simple_expansion (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Str_expa (
                                        trans_string_expansion (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `Cmd_subs (
                                        trans_command_substitution (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `Proc_subs (
                                        trans_process_substitution (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Rep1_spec_char (
                            Run.repeat1
                              (fun v -> trans_special_character (Run.matcher_token v))
                              v
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_semg_meta (
                      (match v with
                      | Alt (0, v) ->
                          `Semg_meta (
                            trans_semgrep_metavariable (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Pat_42e353e (
                            trans_pat_42e353e (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (2, v) ->
                    `Var_assign (
                      trans_variable_assignment (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_group ((kind, body) : mt) : CST.do_group =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Seq [v0; v1; v2] ->
                        (
                          (match v0 with
                          | Alt (0, v) ->
                              `Redi_stmt (
                                trans_redirected_statement (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Var_assign (
                                trans_variable_assignment (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Cmd (
                                trans_command (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Decl_cmd (
                                trans_declaration_command (Run.matcher_token v)
                              )
                          | Alt (4, v) ->
                              `Unset_cmd (
                                trans_unset_command (Run.matcher_token v)
                              )
                          | Alt (5, v) ->
                              `Test_cmd (
                                trans_test_command (Run.matcher_token v)
                              )
                          | Alt (6, v) ->
                              `Nega_cmd (
                                trans_negated_command (Run.matcher_token v)
                              )
                          | Alt (7, v) ->
                              `For_stmt (
                                trans_for_statement (Run.matcher_token v)
                              )
                          | Alt (8, v) ->
                              `C_style_for_stmt (
                                trans_c_style_for_statement (Run.matcher_token v)
                              )
                          | Alt (9, v) ->
                              `While_stmt (
                                trans_while_statement (Run.matcher_token v)
                              )
                          | Alt (10, v) ->
                              `If_stmt (
                                trans_if_statement (Run.matcher_token v)
                              )
                          | Alt (11, v) ->
                              `Case_stmt (
                                trans_case_statement (Run.matcher_token v)
                              )
                          | Alt (12, v) ->
                              `Pipe (
                                trans_pipeline (Run.matcher_token v)
                              )
                          | Alt (13, v) ->
                              `List (
                                trans_list_ (Run.matcher_token v)
                              )
                          | Alt (14, v) ->
                              `Subs (
                                trans_subshell (Run.matcher_token v)
                              )
                          | Alt (15, v) ->
                              `Comp_stmt (
                                trans_compound_statement (Run.matcher_token v)
                              )
                          | Alt (16, v) ->
                              `Func_defi (
                                trans_function_definition (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                          ,
                          Run.opt
                            (fun v ->
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    trans_heredoc_body (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                            v1
                          ,
                          (match v2 with
                          | Alt (0, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMISEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `LF (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `AMP (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_elif_clause ((kind, body) : mt) : CST.elif_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_terminated_statement (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Seq [v0; v1; v2] ->
                        (
                          (match v0 with
                          | Alt (0, v) ->
                              `Redi_stmt (
                                trans_redirected_statement (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Var_assign (
                                trans_variable_assignment (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Cmd (
                                trans_command (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Decl_cmd (
                                trans_declaration_command (Run.matcher_token v)
                              )
                          | Alt (4, v) ->
                              `Unset_cmd (
                                trans_unset_command (Run.matcher_token v)
                              )
                          | Alt (5, v) ->
                              `Test_cmd (
                                trans_test_command (Run.matcher_token v)
                              )
                          | Alt (6, v) ->
                              `Nega_cmd (
                                trans_negated_command (Run.matcher_token v)
                              )
                          | Alt (7, v) ->
                              `For_stmt (
                                trans_for_statement (Run.matcher_token v)
                              )
                          | Alt (8, v) ->
                              `C_style_for_stmt (
                                trans_c_style_for_statement (Run.matcher_token v)
                              )
                          | Alt (9, v) ->
                              `While_stmt (
                                trans_while_statement (Run.matcher_token v)
                              )
                          | Alt (10, v) ->
                              `If_stmt (
                                trans_if_statement (Run.matcher_token v)
                              )
                          | Alt (11, v) ->
                              `Case_stmt (
                                trans_case_statement (Run.matcher_token v)
                              )
                          | Alt (12, v) ->
                              `Pipe (
                                trans_pipeline (Run.matcher_token v)
                              )
                          | Alt (13, v) ->
                              `List (
                                trans_list_ (Run.matcher_token v)
                              )
                          | Alt (14, v) ->
                              `Subs (
                                trans_subshell (Run.matcher_token v)
                              )
                          | Alt (15, v) ->
                              `Comp_stmt (
                                trans_compound_statement (Run.matcher_token v)
                              )
                          | Alt (16, v) ->
                              `Func_defi (
                                trans_function_definition (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                          ,
                          Run.opt
                            (fun v ->
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    trans_heredoc_body (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                            v1
                          ,
                          (match v2 with
                          | Alt (0, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMISEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `LF (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `AMP (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_clause ((kind, body) : mt) : CST.else_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Seq [v0; v1; v2] ->
                        (
                          (match v0 with
                          | Alt (0, v) ->
                              `Redi_stmt (
                                trans_redirected_statement (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Var_assign (
                                trans_variable_assignment (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Cmd (
                                trans_command (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Decl_cmd (
                                trans_declaration_command (Run.matcher_token v)
                              )
                          | Alt (4, v) ->
                              `Unset_cmd (
                                trans_unset_command (Run.matcher_token v)
                              )
                          | Alt (5, v) ->
                              `Test_cmd (
                                trans_test_command (Run.matcher_token v)
                              )
                          | Alt (6, v) ->
                              `Nega_cmd (
                                trans_negated_command (Run.matcher_token v)
                              )
                          | Alt (7, v) ->
                              `For_stmt (
                                trans_for_statement (Run.matcher_token v)
                              )
                          | Alt (8, v) ->
                              `C_style_for_stmt (
                                trans_c_style_for_statement (Run.matcher_token v)
                              )
                          | Alt (9, v) ->
                              `While_stmt (
                                trans_while_statement (Run.matcher_token v)
                              )
                          | Alt (10, v) ->
                              `If_stmt (
                                trans_if_statement (Run.matcher_token v)
                              )
                          | Alt (11, v) ->
                              `Case_stmt (
                                trans_case_statement (Run.matcher_token v)
                              )
                          | Alt (12, v) ->
                              `Pipe (
                                trans_pipeline (Run.matcher_token v)
                              )
                          | Alt (13, v) ->
                              `List (
                                trans_list_ (Run.matcher_token v)
                              )
                          | Alt (14, v) ->
                              `Subs (
                                trans_subshell (Run.matcher_token v)
                              )
                          | Alt (15, v) ->
                              `Comp_stmt (
                                trans_compound_statement (Run.matcher_token v)
                              )
                          | Alt (16, v) ->
                              `Func_defi (
                                trans_function_definition (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                          ,
                          Run.opt
                            (fun v ->
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    trans_heredoc_body (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                            v1
                          ,
                          (match v2 with
                          | Alt (0, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMISEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `LF (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `AMP (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expansion ((kind, body) : mt) : CST.expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `HASH (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `BANG (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Var_name_EQ_opt_choice_conc (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            trans_variable_name (Run.matcher_token v0),
                            Run.trans_token (Run.matcher_token v1),
                            Run.opt
                              (fun v ->
                                (match v with
                                | Alt (0, v) ->
                                    `Conc (
                                      trans_concatenation (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_semg_deep_exp (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Semg_deep_exp (
                                            trans_semgrep_deep_expression (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Choice_word (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Word (
                                                  trans_word (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `Str (
                                                  trans_string_ (Run.matcher_token v)
                                                )
                                            | Alt (2, v) ->
                                                `Raw_str (
                                                  trans_raw_string (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `Ansii_c_str (
                                                  trans_ansii_c_string (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `Expa (
                                                  trans_expansion (Run.matcher_token v)
                                                )
                                            | Alt (5, v) ->
                                                `Simple_expa (
                                                  trans_simple_expansion (Run.matcher_token v)
                                                )
                                            | Alt (6, v) ->
                                                `Str_expa (
                                                  trans_string_expansion (Run.matcher_token v)
                                                )
                                            | Alt (7, v) ->
                                                `Cmd_subs (
                                                  trans_command_substitution (Run.matcher_token v)
                                                )
                                            | Alt (8, v) ->
                                                `Proc_subs (
                                                  trans_process_substitution (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | Alt (2, v) ->
                                    `Rep1_spec_char (
                                      Run.repeat1
                                        (fun v -> trans_special_character (Run.matcher_token v))
                                        v
                                    )
                                | _ -> assert false
                                )
                              )
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_subs_opt_tok_prec_p1_slash_opt_regex_rep_choice_choice_conc (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Subs (
                                  trans_subscript (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_semg_meta (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Semg_meta (
                                        trans_semgrep_metavariable (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Pat_42e353e (
                                        trans_pat_42e353e (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (2, v) ->
                                `Choice_STAR (
                                  (match v with
                                  | Alt (0, v) ->
                                      `STAR (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `AT (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `QMARK (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `DASH (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `DOLLAR (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `X_0 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `X__ (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.opt
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_tok_prec_p1_slash (Run.matcher_token v0),
                                      Run.opt
                                        (fun v -> trans_regex (Run.matcher_token v))
                                        v1
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Alt (0, v) ->
                                    `Choice_conc (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Conc (
                                            trans_concatenation (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Choice_semg_deep_exp (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Semg_deep_exp (
                                                  trans_semgrep_deep_expression (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `Choice_word (
                                                  (match v with
                                                  | Alt (0, v) ->
                                                      `Word (
                                                        trans_word (Run.matcher_token v)
                                                      )
                                                  | Alt (1, v) ->
                                                      `Str (
                                                        trans_string_ (Run.matcher_token v)
                                                      )
                                                  | Alt (2, v) ->
                                                      `Raw_str (
                                                        trans_raw_string (Run.matcher_token v)
                                                      )
                                                  | Alt (3, v) ->
                                                      `Ansii_c_str (
                                                        trans_ansii_c_string (Run.matcher_token v)
                                                      )
                                                  | Alt (4, v) ->
                                                      `Expa (
                                                        trans_expansion (Run.matcher_token v)
                                                      )
                                                  | Alt (5, v) ->
                                                      `Simple_expa (
                                                        trans_simple_expansion (Run.matcher_token v)
                                                      )
                                                  | Alt (6, v) ->
                                                      `Str_expa (
                                                        trans_string_expansion (Run.matcher_token v)
                                                      )
                                                  | Alt (7, v) ->
                                                      `Cmd_subs (
                                                        trans_command_substitution (Run.matcher_token v)
                                                      )
                                                  | Alt (8, v) ->
                                                      `Proc_subs (
                                                        trans_process_substitution (Run.matcher_token v)
                                                      )
                                                  | _ -> assert false
                                                  )
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | Alt (2, v) ->
                                          `Rep1_spec_char (
                                            Run.repeat1
                                              (fun v -> trans_special_character (Run.matcher_token v))
                                              v
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | Alt (1, v) ->
                                    `COLON (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `COLONQMARK (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `EQ (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (4, v) ->
                                    `COLONDASH (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (5, v) ->
                                    `PERC (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (6, v) ->
                                    `DASH (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (7, v) ->
                                    `HASH (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_conc (
            (match v with
            | Alt (0, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Rep1_spec_char (
                  Run.repeat1
                    (fun v -> trans_special_character (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Un_exp (
            trans_unary_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Tern_exp (
            trans_ternary_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Post_exp (
            trans_postfix_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_file_redirect ((kind, body) : mt) : CST.file_redirect =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_file_descriptor (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `LT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `GT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `GTGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `AMPGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `AMPGTGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `LTAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `GTAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `GTBAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Rep1_spec_char (
                  Run.repeat1
                    (fun v -> trans_special_character (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `For (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Select (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Semg_meta (
                  trans_semgrep_metavariable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_42e353e (
                  trans_pat_42e353e (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.repeat1
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Conc (
                                trans_concatenation (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Choice_semg_deep_exp (
                                (match v with
                                | Alt (0, v) ->
                                    `Semg_deep_exp (
                                      trans_semgrep_deep_expression (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_word (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Word (
                                            trans_word (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Str (
                                            trans_string_ (Run.matcher_token v)
                                          )
                                      | Alt (2, v) ->
                                          `Raw_str (
                                            trans_raw_string (Run.matcher_token v)
                                          )
                                      | Alt (3, v) ->
                                          `Ansii_c_str (
                                            trans_ansii_c_string (Run.matcher_token v)
                                          )
                                      | Alt (4, v) ->
                                          `Expa (
                                            trans_expansion (Run.matcher_token v)
                                          )
                                      | Alt (5, v) ->
                                          `Simple_expa (
                                            trans_simple_expansion (Run.matcher_token v)
                                          )
                                      | Alt (6, v) ->
                                          `Str_expa (
                                            trans_string_expansion (Run.matcher_token v)
                                          )
                                      | Alt (7, v) ->
                                          `Cmd_subs (
                                            trans_command_substitution (Run.matcher_token v)
                                          )
                                      | Alt (8, v) ->
                                          `Proc_subs (
                                            trans_process_substitution (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | Alt (2, v) ->
                              `Rep1_spec_char (
                                Run.repeat1
                                  (fun v -> trans_special_character (Run.matcher_token v))
                                  v
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMISEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `LF (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_do_group (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_definition ((kind, body) : mt) : CST.function_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Func_exte_word_opt_LPAR_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_extended_word (Run.matcher_token v1),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  Run.trans_token (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Word_LPAR_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_word (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_heredoc_body ((kind, body) : mt) : CST.heredoc_body =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_here_body (
            trans_simple_heredoc_body (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Here_body_begin_rep_choice_expa_here_body_end (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_heredoc_body_beginning (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Expa (
                            trans_expansion (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Simple_expa (
                            trans_simple_expansion (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Cmd_subs (
                            trans_command_substitution (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Here_body_middle (
                            trans_heredoc_body_middle (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  trans_heredoc_body_end (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_herestring_redirect ((kind, body) : mt) : CST.herestring_redirect =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Rep1_spec_char (
                  Run.repeat1
                    (fun v -> trans_special_character (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_terminated_statement (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Seq [v0; v1; v2] ->
                        (
                          (match v0 with
                          | Alt (0, v) ->
                              `Redi_stmt (
                                trans_redirected_statement (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Var_assign (
                                trans_variable_assignment (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Cmd (
                                trans_command (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Decl_cmd (
                                trans_declaration_command (Run.matcher_token v)
                              )
                          | Alt (4, v) ->
                              `Unset_cmd (
                                trans_unset_command (Run.matcher_token v)
                              )
                          | Alt (5, v) ->
                              `Test_cmd (
                                trans_test_command (Run.matcher_token v)
                              )
                          | Alt (6, v) ->
                              `Nega_cmd (
                                trans_negated_command (Run.matcher_token v)
                              )
                          | Alt (7, v) ->
                              `For_stmt (
                                trans_for_statement (Run.matcher_token v)
                              )
                          | Alt (8, v) ->
                              `C_style_for_stmt (
                                trans_c_style_for_statement (Run.matcher_token v)
                              )
                          | Alt (9, v) ->
                              `While_stmt (
                                trans_while_statement (Run.matcher_token v)
                              )
                          | Alt (10, v) ->
                              `If_stmt (
                                trans_if_statement (Run.matcher_token v)
                              )
                          | Alt (11, v) ->
                              `Case_stmt (
                                trans_case_statement (Run.matcher_token v)
                              )
                          | Alt (12, v) ->
                              `Pipe (
                                trans_pipeline (Run.matcher_token v)
                              )
                          | Alt (13, v) ->
                              `List (
                                trans_list_ (Run.matcher_token v)
                              )
                          | Alt (14, v) ->
                              `Subs (
                                trans_subshell (Run.matcher_token v)
                              )
                          | Alt (15, v) ->
                              `Comp_stmt (
                                trans_compound_statement (Run.matcher_token v)
                              )
                          | Alt (16, v) ->
                              `Func_defi (
                                trans_function_definition (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                          ,
                          Run.opt
                            (fun v ->
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    trans_heredoc_body (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                            v1
                          ,
                          (match v2 with
                          | Alt (0, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMISEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `LF (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `AMP (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v3
            ,
            Run.repeat
              (fun v -> trans_elif_clause (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_else_clause (Run.matcher_token v))
              v5
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_last_case_item ((kind, body) : mt) : CST.last_case_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Rep1_spec_char (
                  Run.repeat1
                    (fun v -> trans_special_character (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_semg_deep_exp (
                            (match v with
                            | Alt (0, v) ->
                                `Semg_deep_exp (
                                  trans_semgrep_deep_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_word (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Word (
                                        trans_word (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Str (
                                        trans_string_ (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Raw_str (
                                        trans_raw_string (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Ansii_c_str (
                                        trans_ansii_c_string (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Expa (
                                        trans_expansion (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Simple_expa (
                                        trans_simple_expansion (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Str_expa (
                                        trans_string_expansion (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `Cmd_subs (
                                        trans_command_substitution (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `Proc_subs (
                                        trans_process_substitution (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Rep1_spec_char (
                            Run.repeat1
                              (fun v -> trans_special_character (Run.matcher_token v))
                              v
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_ ((kind, body) : mt) : CST.list_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Redi_stmt (
                  trans_redirected_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_assign (
                  trans_variable_assignment (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd (
                  trans_command (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Decl_cmd (
                  trans_declaration_command (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unset_cmd (
                  trans_unset_command (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Nega_cmd (
                  trans_negated_command (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `C_style_for_stmt (
                  trans_c_style_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Pipe (
                  trans_pipeline (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `List (
                  trans_list_ (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `AMPAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `BARBAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Redi_stmt (
                  trans_redirected_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_assign (
                  trans_variable_assignment (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd (
                  trans_command (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Decl_cmd (
                  trans_declaration_command (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unset_cmd (
                  trans_unset_command (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Nega_cmd (
                  trans_negated_command (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `C_style_for_stmt (
                  trans_c_style_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Pipe (
                  trans_pipeline (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `List (
                  trans_list_ (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_negated_command ((kind, body) : mt) : CST.negated_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Cmd (
                  trans_command (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pipeline ((kind, body) : mt) : CST.pipeline =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Redi_stmt (
                  trans_redirected_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_assign (
                  trans_variable_assignment (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd (
                  trans_command (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Decl_cmd (
                  trans_declaration_command (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unset_cmd (
                  trans_unset_command (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Nega_cmd (
                  trans_negated_command (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `C_style_for_stmt (
                  trans_c_style_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Pipe (
                  trans_pipeline (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `List (
                  trans_list_ (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `BAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `BARAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Redi_stmt (
                  trans_redirected_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_assign (
                  trans_variable_assignment (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd (
                  trans_command (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Decl_cmd (
                  trans_declaration_command (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unset_cmd (
                  trans_unset_command (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Nega_cmd (
                  trans_negated_command (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `C_style_for_stmt (
                  trans_c_style_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Pipe (
                  trans_pipeline (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `List (
                  trans_list_ (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_postfix_expression ((kind, body) : mt) : CST.postfix_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `PLUSPLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHDASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_process_substitution ((kind, body) : mt) : CST.process_substitution =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LTLPAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `GTLPAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_statements (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_redirected_statement ((kind, body) : mt) : CST.redirected_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Redi_stmt (
                  trans_redirected_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_assign (
                  trans_variable_assignment (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd (
                  trans_command (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Decl_cmd (
                  trans_declaration_command (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unset_cmd (
                  trans_unset_command (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Nega_cmd (
                  trans_negated_command (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `C_style_for_stmt (
                  trans_c_style_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Pipe (
                  trans_pipeline (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `List (
                  trans_list_ (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `File_redi (
                      trans_file_redirect (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Here_redi_a9657de (
                      trans_heredoc_redirect (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Here_redi_7d3292d (
                      trans_herestring_redirect (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_semgrep_deep_expression ((kind, body) : mt) : CST.semgrep_deep_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Rep1_spec_char (
                  Run.repeat1
                    (fun v -> trans_special_character (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statements ((kind, body) : mt) : CST.statements =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Redi_stmt (
                            trans_redirected_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Var_assign (
                            trans_variable_assignment (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Cmd (
                            trans_command (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Decl_cmd (
                            trans_declaration_command (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Unset_cmd (
                            trans_unset_command (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Test_cmd (
                            trans_test_command (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Nega_cmd (
                            trans_negated_command (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `For_stmt (
                            trans_for_statement (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `C_style_for_stmt (
                            trans_c_style_for_statement (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `While_stmt (
                            trans_while_statement (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `If_stmt (
                            trans_if_statement (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Pipe (
                            trans_pipeline (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `List (
                            trans_list_ (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Subs (
                            trans_subshell (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Comp_stmt (
                            trans_compound_statement (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Func_defi (
                            trans_function_definition (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_heredoc_body (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      (match v2 with
                      | Alt (0, v) ->
                          `SEMI (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `SEMISEMI (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `LF (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `AMP (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Redi_stmt (
                  trans_redirected_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_assign (
                  trans_variable_assignment (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd (
                  trans_command (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Decl_cmd (
                  trans_declaration_command (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unset_cmd (
                  trans_unset_command (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Nega_cmd (
                  trans_negated_command (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `C_style_for_stmt (
                  trans_c_style_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Pipe (
                  trans_pipeline (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `List (
                  trans_list_ (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_heredoc_body (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `SEMISEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `LF (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `AMP (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Opt_DOLLAR_str_content (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.opt
                                    (fun v -> Run.trans_token (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_string_content (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Expa (
                            trans_expansion (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Simple_expa (
                            trans_simple_expansion (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Cmd_subs (
                            trans_command_substitution (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v -> trans_concat (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_expansion ((kind, body) : mt) : CST.string_expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Raw_str (
                  trans_raw_string (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript ((kind, body) : mt) : CST.subscript =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_variable_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_semg_deep_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Semg_deep_exp (
                        trans_semgrep_deep_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_word (
                        (match v with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Raw_str (
                              trans_raw_string (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Ansii_c_str (
                              trans_ansii_c_string (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Expa (
                              trans_expansion (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Simple_expa (
                              trans_simple_expansion (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Str_expa (
                              trans_string_expansion (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Cmd_subs (
                              trans_command_substitution (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Proc_subs (
                              trans_process_substitution (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Rep1_spec_char (
                  Run.repeat1
                    (fun v -> trans_special_character (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_concat (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_concat (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subshell ((kind, body) : mt) : CST.subshell =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statements (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_terminated_statement ((kind, body) : mt) : CST.terminated_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Redi_stmt (
                  trans_redirected_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_assign (
                  trans_variable_assignment (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd (
                  trans_command (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Decl_cmd (
                  trans_declaration_command (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unset_cmd (
                  trans_unset_command (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Test_cmd (
                  trans_test_command (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Nega_cmd (
                  trans_negated_command (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `C_style_for_stmt (
                  trans_c_style_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Pipe (
                  trans_pipeline (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `List (
                  trans_list_ (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Subs (
                  trans_subshell (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMISEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `LF (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ternary_expression ((kind, body) : mt) : CST.ternary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_test_command ((kind, body) : mt) : CST.test_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LBRACK_exp_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LBRACKLBRACK_exp_RBRACKRBRACK (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `LPARLPAR_exp_RPARRPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Test_op (
                  trans_test_operator (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unset_command ((kind, body) : mt) : CST.unset_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Unset (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unse (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_conc (
                      (match v with
                      | Alt (0, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_semg_deep_exp (
                            (match v with
                            | Alt (0, v) ->
                                `Semg_deep_exp (
                                  trans_semgrep_deep_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_word (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Word (
                                        trans_word (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Str (
                                        trans_string_ (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Raw_str (
                                        trans_raw_string (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Ansii_c_str (
                                        trans_ansii_c_string (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Expa (
                                        trans_expansion (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Simple_expa (
                                        trans_simple_expansion (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Str_expa (
                                        trans_string_expansion (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `Cmd_subs (
                                        trans_command_substitution (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `Proc_subs (
                                        trans_process_substitution (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Rep1_spec_char (
                            Run.repeat1
                              (fun v -> trans_special_character (Run.matcher_token v))
                              v
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_semg_meta (
                      (match v with
                      | Alt (0, v) ->
                          `Semg_meta (
                            trans_semgrep_metavariable (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Pat_42e353e (
                            trans_pat_42e353e (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_assignment ((kind, body) : mt) : CST.variable_assignment =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_semg_meta_eq_choice_choice_conc (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Semg_meta_eq (
                        trans_semgrep_metavar_eq (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_meta_pluseq (
                        trans_semgrep_metavar_pluseq (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `Choice_conc (
                        (match v with
                        | Alt (0, v) ->
                            `Conc (
                              trans_concatenation (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Choice_semg_deep_exp (
                              (match v with
                              | Alt (0, v) ->
                                  `Semg_deep_exp (
                                    trans_semgrep_deep_expression (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Choice_word (
                                    (match v with
                                    | Alt (0, v) ->
                                        `Word (
                                          trans_word (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Str (
                                          trans_string_ (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Raw_str (
                                          trans_raw_string (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Ansii_c_str (
                                          trans_ansii_c_string (Run.matcher_token v)
                                        )
                                    | Alt (4, v) ->
                                        `Expa (
                                          trans_expansion (Run.matcher_token v)
                                        )
                                    | Alt (5, v) ->
                                        `Simple_expa (
                                          trans_simple_expansion (Run.matcher_token v)
                                        )
                                    | Alt (6, v) ->
                                        `Str_expa (
                                          trans_string_expansion (Run.matcher_token v)
                                        )
                                    | Alt (7, v) ->
                                        `Cmd_subs (
                                          trans_command_substitution (Run.matcher_token v)
                                        )
                                    | Alt (8, v) ->
                                        `Proc_subs (
                                          trans_process_substitution (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (2, v) ->
                            `Rep1_spec_char (
                              Run.repeat1
                                (fun v -> trans_special_character (Run.matcher_token v))
                                v
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Array (
                        trans_array_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Empty_value (
                        trans_empty_value (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_var_name_choice_EQ_choice_choice_conc (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var_name (
                        trans_variable_name (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Subs (
                        trans_subscript (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `EQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `PLUSEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Choice_conc (
                        (match v with
                        | Alt (0, v) ->
                            `Conc (
                              trans_concatenation (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Choice_semg_deep_exp (
                              (match v with
                              | Alt (0, v) ->
                                  `Semg_deep_exp (
                                    trans_semgrep_deep_expression (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Choice_word (
                                    (match v with
                                    | Alt (0, v) ->
                                        `Word (
                                          trans_word (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Str (
                                          trans_string_ (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Raw_str (
                                          trans_raw_string (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Ansii_c_str (
                                          trans_ansii_c_string (Run.matcher_token v)
                                        )
                                    | Alt (4, v) ->
                                        `Expa (
                                          trans_expansion (Run.matcher_token v)
                                        )
                                    | Alt (5, v) ->
                                        `Simple_expa (
                                          trans_simple_expansion (Run.matcher_token v)
                                        )
                                    | Alt (6, v) ->
                                        `Str_expa (
                                          trans_string_expansion (Run.matcher_token v)
                                        )
                                    | Alt (7, v) ->
                                        `Cmd_subs (
                                          trans_command_substitution (Run.matcher_token v)
                                        )
                                    | Alt (8, v) ->
                                        `Proc_subs (
                                          trans_process_substitution (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (2, v) ->
                            `Rep1_spec_char (
                              Run.repeat1
                                (fun v -> trans_special_character (Run.matcher_token v))
                                v
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Array (
                        trans_array_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Empty_value (
                        trans_empty_value (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_terminated_statement (Run.matcher_token v1),
            trans_do_group (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_program ((kind, body) : mt) : CST.program =
  match body with
  | Children v ->
      Run.opt
        (fun v -> trans_statements (Run.matcher_token v))
        v
  | Leaf _ -> assert false



(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_program

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

